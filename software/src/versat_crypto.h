#ifndef INCLUDED_SHA_AES
#define INCLUDED_SHA_AES

#include "stdint.h"
#include "stddef.h"

/** \file
 * Defines the API to execute the crypto algorithms using an accelerator generated by Versat.
 * The interface of the functions is similar to the interface of the software only implementations.
 */

//! AES block size in bytes
#define AES_BLK_SIZE (16)

//! AES key size in bytes for the 256 bit variant
#define AES_KEY_SIZE (32)

//! size of hash produced by SHA-256
#define SHA_DIGEST_SIZE (32)

/**
 * Prepares Versat to perform the SHA algorithm.
 * \brief Initializes Versat SHA
 */
void InitVersatSHA();

/**
 * Prepares Versat to perform the AES algorithm.
 * \brief Initializes Versat AES
 */
void InitVersatAES();

/**
 * Prepares Versat to perform encryption using AES. InitVersatAES must have been previously called
 * \brief Initializes AES in encryption mode.
 */
void InitAESEncryption();

/**
 * Uses Versat accelerator to accelerate calculation of SHA
 * \brief Calculates SHA256 value of input
 * \param out buffer to write result. Needs to be able to store 32 bytes of data
 * \param in buffer with data
 * \param inlen size of in buffer in bytes
 */
void VersatSHA(uint8_t *out, const uint8_t *in, size_t inlen);

/**
 * Processes plaintext and stores the encrypt result in encrypted
 * \brief Calculates the AES in ECB mode using a 256 bit key
 * \param key must contain 32 bytes. 
 * \param plaintext points to a C-Style null terminated string. 
 * \param result points to a buffer of equal size to data
 */
void AES_ECB256(uint8_t* key,uint8_t* plaintext,uint8_t* result);

/**
 * Need to set random seed by calling nist_kat_init before calling this function
 * \brief Performs Generation using the McEliece algorithm
 * \param pk buffer of enough size to store generated public key
 * \param sk buffer of enough size to store generated secret key
 */
void VersatMcEliece(unsigned char *pk,unsigned char *sk);

/**
 * \brief Converts bytes into hexadecimal string
 * \param text bytes to convert
 * \param buffer to hold result. Needs to have space to store str_size * 2 bytes
 * \param str_size number of bytes to convert
 * \result returns pointer to start of string
 */
char* GetHexadecimal(const char* text,char* buffer,int str_size);

/**
 * \brief Converts hexadecimal string to bytes
 * \param buffer to hold result. Needs to have space to store str/2 bytes
 * \param str C-Style string that contains hexadecimal characters. First non hexadecimal character ends conversion
 * \result number of bytes converted
 */
int HexStringToHex(char* buffer,const char* str);

#endif // INCLUDED_SHA_AES